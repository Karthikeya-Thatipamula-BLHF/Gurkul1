#!/usr/bin/env python3
"""
Automated fix for Python 3.12 distutils removal issue
"""

import subprocess
import sys
import os

def run_command(cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {cmd}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {cmd} failed: {e}")
        return False

def main():
    print("üîß PYTHON 3.12 DISTUTILS COMPATIBILITY FIX")
    print("=" * 60)
    
    print("üìã ISSUE IDENTIFIED:")
    print("‚Ä¢ Python 3.12 removed distutils module")
    print("‚Ä¢ setuptools trying to import distutils.core")
    print("‚Ä¢ ModuleNotFoundError during package installation")
    
    print("\nüéØ AVAILABLE SOLUTIONS:")
    print("1. Python 3.12 + setuptools/wheel fix (modern)")
    print("2. Python 3.11 (distutils included)")
    print("3. Minimal requirements (guaranteed)")
    
    choice = input("\nChoose solution (1/2/3): ").strip()
    
    if choice == "1":
        print("\nüöÄ APPLYING PYTHON 3.12 + SETUPTOOLS FIX...")
        print("‚úÖ setuptools>=69.0.0 will be installed first")
        print("‚úÖ wheel>=0.42.0 will be installed first")
        print("‚úÖ Updated requirements with distutils fix")
        
        # Revert to Python 3.12 config
        with open('.python-version', 'w') as f:
            f.write('3.12.8')
        with open('runtime.txt', 'w') as f:
            f.write('python-3.12.8')
        
        commands = [
            "git add .python-version runtime.txt render.yaml Backend/requirements_python312_distutils_fix.txt",
            'git commit -m "Fix: Python 3.12 + setuptools for distutils compatibility"',
            "git push origin main"
        ]
        
    elif choice == "2":
        print("\nüöÄ APPLYING PYTHON 3.11 FIX...")
        print("‚úÖ Python 3.11.10 includes distutils")
        print("‚úÖ No setuptools workarounds needed")
        print("‚úÖ All packages work out of the box")
        
        commands = [
            "git add .python-version runtime.txt render.yaml Backend/requirements_python311.txt",
            'git commit -m "Fix: Use Python 3.11.10 to avoid distutils issues"',
            "git push origin main"
        ]
        
    elif choice == "3":
        print("\nüöÄ APPLYING MINIMAL REQUIREMENTS FIX...")
        if run_command("cp Backend/requirements_minimal_distutils_safe.txt Backend/requirements_production.txt"):
            print("‚úÖ Updated to minimal distutils-safe requirements")
        
        commands = [
            "git add Backend/requirements_production.txt",
            'git commit -m "Fix: Use minimal distutils-safe requirements"',
            "git push origin main"
        ]
        
    else:
        print("‚ùå Invalid choice")
        return
    
    print("\nüì§ DEPLOYING FIX...")
    success_count = 0
    for cmd in commands:
        if run_command(cmd):
            success_count += 1
    
    if success_count == len(commands):
        print("\n‚úÖ DISTUTILS FIX DEPLOYED!")
        print("üîó Monitor deployment: https://dashboard.render.com")
        print("üìä Expected build time: 3-5 minutes")
        
        if choice == "1":
            print("üéâ setuptools will provide distutils compatibility!")
        elif choice == "2":
            print("üéâ Python 3.11 includes distutils natively!")
        else:
            print("üéâ Minimal requirements avoid distutils entirely!")
            
        print("\nüìã VERIFICATION URLS:")
        print("‚Ä¢ Health: https://gurukul-backend.onrender.com/health")
        print("‚Ä¢ Docs: https://gurukul-backend.onrender.com/docs")
        print("‚Ä¢ Root: https://gurukul-backend.onrender.com/")
        
        print("\nüîç WHAT WAS FIXED:")
        if choice == "1":
            print("‚Ä¢ setuptools>=69.0.0 installed first")
            print("‚Ä¢ wheel>=0.42.0 provides build tools")
            print("‚Ä¢ distutils compatibility restored")
        elif choice == "2":
            print("‚Ä¢ Python 3.11.10 includes distutils")
            print("‚Ä¢ No compatibility issues")
            print("‚Ä¢ All packages work natively")
        else:
            print("‚Ä¢ Removed packages that need distutils")
            print("‚Ä¢ Minimal, reliable deployment")
    else:
        print("\n‚ö†Ô∏è Some commands failed, check manually")

if __name__ == "__main__":
    main()
